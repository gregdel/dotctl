#!/bin/sh
set -e

DOTCTL_DOTFILES_DIR=${DOTCTL_DOTFILES_DIR:="$HOME/.dotfiles"}
DOTCTL_DOTFILES_DESTDIR=${DOTCTL_DOTFILES_DESTDIR:=$HOME}
DOTCTL_EXCLUDES=${DOTCTL_EXCLUDES:=".gitignore .gitmodules"}
DOTCTL_SYMLINK_DIRS=${DOTCTL_SYMLINK_DIRS:=""}
DOTCTL_VERBOSE=${DOTCTL_VERBOSE:="0"}
DOTCTL_NO_HOOK=${DOTCTL_NO_HOOK:="0"}

_usage() {
	echo "Usage: $(basename "$0") [OPTIONS] CMD"
	echo "  OPTIONS:"
	echo "      -v - enable verbose mode"
	echo "      -n - disable hooks"
	echo "  CMD:"
	echo "      status                   - display the status of the dotfiles"
	echo "      up [tag1] [tag2] ....    - install the dotfiles, tags can optionally be specified"
	echo "      down [tag1] [tag2] ....  - install the dotfiles, tags can optionally be specified"
}

_log() {
	[ "$DOTCTL_VERBOSE" = "1" ] && echo "$1"
}

_err() {
	_log "err: $*" 1>&2
	exit 1
}

_git() {
	git -C "$DOTCTL_DOTFILES_DIR" "$@"
}

_tracked_files() {
	_git ls-files "$@"
}

_symlink_dirs() {
	prefix=$1

	include=
	for dir in $DOTCTL_SYMLINK_DIRS; do
		if [ -z "$prefix" ]; then
			regexp="^($dir)\/"
		else
			regexp="^$prefix\/$dir\/"
		fi

		if [ -z "$include" ]; then
			include=$regexp
		else
			include="$include|$regexp"
		fi
	done

	grep -Eo "$include" | uniq | sed 's/\/$//'
}

_install_symlink_dirs() {
	prefix=$1
	while read -r dir; do
		src="$DOTCTL_DOTFILES_DIR/$dir"
		[ -d "$src" ] || continue

		dst=$(echo "$dir" | sed "s/$prefix\///")
		dst="$DOTCTL_DOTFILES_DESTDIR/.$dst"

		if [ ! -L "$dst" ]; then
			_log "Installing symlink directory from $src to $dst"
			ln -s "$src" "$dst"
		fi
	done
}

_uninstall_symlink_dirs() {
	prefix=$1
	while read -r dir; do
		dst=$(echo "$dir" | sed "s/$prefix\///")
		dst="$DOTCTL_DOTFILES_DESTDIR/.$dst"
		[ -L "$dst" ] || continue

		_log "Uninstalling $dst"
		rm "$dst"
	done
}

_install_files() {
	prefix=$1
	while read -r file; do
		case "$file" in
			tag-*)
				_log "With tags !! ${file#*/}"
				;;
			*)
				_log "Without tags !! $file"
				;;
		esac
		_install_file "$file" "$prefix"
	done
}

_install_file() {
	file=$1
	prefix=$2

	_log "file: $file"

	dest=$file
	[ -n "$prefix" ] && dest=$(echo "$file" | cut -d '/' -f 2-)


	dir=$(dirname "$dest")
	if [ "$dir" != "." ]; then
		dir="$DOTCTL_DOTFILES_DESTDIR/.$dir"
		if [ ! -d "$dir" ]; then
			_log "Creating directory $dir"
			mkdir -p "$dir"
		fi
	fi

	dest="$DOTCTL_DOTFILES_DESTDIR/.$dest"
	if [ ! -L "$dest" ]; then
		_log "Installing $file to $dest"
		ln -s "$DOTCTL_DOTFILES_DIR/$file" "$dest"
	fi
}

_uninstall_files() {
	prefix=$1
	while read -r file; do
		_uninstall_file "$file" "$prefix"
	done
}

_uninstall_file() {
	file=$1
	prefix=$2

	dest=$file
	[ -n "$prefix" ] && dest=$(echo "$file" | cut -d '/' -f 2-)
	file_dir=$(dirname "$file")

	dest="$DOTCTL_DOTFILES_DESTDIR/.$dest"
	[ -L "$dest" ] || return 0

	_log "Uninstalling $dest"
	rm "$dest"

	[ "$file_dir" = "." ] && return 0

	dir=$(dirname "$dest")
	_log "Removing empty directories $dir"
	rmdir --ignore-fail-on-non-empty -p "$dir"
}

_exclude_files() {
	pattern=$(echo "$DOTCTL_EXCLUDES" | sed 's/ /$|/g')

	set -x
	for dir in $DOTCTL_SYMLINK_DIRS; do
		# dirname/.....
		# .../dirname/.....
		regexp="$dir/|/$dir/"
		if [ -z "$pattern" ]; then
			pattern=$regexp
		else
			pattern="$pattern|$regexp"
		fi
	done

	grep -v -E "$pattern"
	set +x
}

_exclude_tags() {
	grep -v -E "^tag-"
}

_only_tag() {
	tag=$1
	grep -E "^$tag\/"
}

_up() {
	tags="$*"

	_log "Installing symlink directories"
	_tracked_files | _symlink_dirs | _install_symlink_dirs

	_log "Installing tracked files"
	_tracked_files | _exclude_tags | _exclude_files | _install_files

	for tag in $tags; do
		tag_dir="tag-$tag"
		_log "Installing symlink directories with tag $tag"
		_tracked_files | _symlink_dirs "$tag_dir" | _install_symlink_dirs "$tag_dir"
		_log "Installing tracked files with tag $tag"
		_tracked_files | _only_tag "$tag_dir" | _exclude_files | _install_files "$tag_dir"
	done

	hook_file="$DOTCTL_DOTFILES_DIR/hooks/post-up"
	if [ "$DOTCTL_NO_HOOK" = "0" ]; then
		_log "Running post-up hook"
		[ -x "$hook_file" ] && "$hook_file"
	fi
}

_down() {
	tags="$*"

	_log "Uninstalling symlink directories"
	_tracked_files | _symlink_dirs | _uninstall_symlink_dirs

	_log "Uninstalling tracked files"
	_tracked_files | _exclude_tags | _exclude_files | _uninstall_files

	for tag in $tags; do
		tag_dir="tag-$tag"
		_log "Uninstalling symlink directories with tag $tag"
		_tracked_files | _symlink_dirs "$tag_dir" | _uninstall_symlink_dirs "$tag_dir"
		_log "Uninstalling tracked files with tag $tag"
		_tracked_files | _only_tag "$tag_dir" | _exclude_files | _uninstall_files "$tag_dir"
	done

	hook_file="$DOTCTL_DOTFILES_DIR/hooks/post-down"
	if [ "$DOTCTL_NO_HOOK" = "0" ]; then
		_log "Running post-down hook"
		[ -x "$hook_file" ] && "$hook_file"
	fi
}

_git_changes() {
	status=$(_git status --porcelain \
		| awk '{!x[$1]++}END{for (i in x) print i ":" x[i]}')

	[ -z "$status" ] && return

	echo "Git changes:"
	for line in $status; do
		sign=${line%%:*}
		count=${line##*:}

		case "$sign" in
			??) sign="Untracked" ;;
			M) sign="Modified" ;;
		esac

		echo "  $sign: $count"
	done
}

_status() {
	echo "Source:          $DOTCTL_DOTFILES_DIR"
	echo "Destination:     $DOTCTL_DOTFILES_DESTDIR"
	echo "Tracked files:   $(_tracked_files | wc -l)"
	_git_changes
	echo "Tags: "
	for file in "$DOTCTL_DOTFILES_DIR"/tag-*; do
		tag=${file##*-}
		echo "  - $tag"
	done
}

_install() {
	file=$1
	[ -n "$file" ] || _err "Missing filename"

	file=$(readlink -f "$file")
	echo "Installing file $file in $DOTCTL_DOTFILES_DESTDIR"

	if [ -f "$file" ]; then
		_tracked_files --error-unmatch "$file" | _exclude_files | _install_files
	else
		set -x
		_tracked_files --error-unmatch "$file" | _symlink_dirs
		set +x
		# _tracked_files --error-unmatch "$file" | _symlink_dirs | _install_symlink_dirs
	fi
}

while [ "$1" ]; do
	case "$1" in
		-n)
			_log "Hooks disabled"
			DOTCTL_NO_HOOK=1
			;;
		-v)
			DOTCTL_VERBOSE=1
			_log "Verbose mode enabled"
			;;
		status)
			_status
			break
			;;
		up)
			shift
			_up "$@"
			break
			;;
		down)
			shift
			_down "$@"
			break
			;;
		install)
			shift
			_install "$@"
			break
			;;
		*)
			_usage
			break
			;;
	esac
done
